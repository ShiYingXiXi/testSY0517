import time

# from playwright.sync_api import sync_playwright, expect

import asyncio

# from playwright.async_api import async_playwright, expect


# async def test_sy02():
#     async with async_playwright() as p:
#         browser = await p.chromium.launch(headless=False)
#         context = await browser.new_context()
#         context.tracing.start(screenshots=True, snapshots=True, sources=True)
#         page = context.new_page()
#         page.goto("https://ceshiren.com")  # 在异步编程中，可以使用 await 来等待异步操作完成
#         # await asyncio.sleep(2)  # 等待 2 秒
#         page.locator("#search-button").click()
#         page.locator("#search-term").fill("Appium")
#         page.keyboard.down("Enter")
#         # time.sleep(3)
#         result = page.locator(".results .item:nth-child(1).topic-title")
#         expect(result).to_contain_text("App")
#         # result = page.locator(".list>li:nth-child(1).topic-title>span")
#         # expect(result).to_contain_text("自动化")
#         context.tracing.stop(path="sy.zip")
#         await browser.close()


from playwright.async_api import async_playwright, expect

import asyncio

from playwright.sync_api import Locator
async def test_run(playwright):
   browser = await playwright.chromium.launch(headless=False)
   context = await browser.new_context()
   await context.tracing.start(screenshots=True, snapshots=True, sources=True)
   page = await context.new_page()

   await page.goto("https://ceshiren.com")
   # 等待DOMContentLoaded事件，即DOM树构建完成
   # await page.waitForLoadState('domcontentloaded')
   await page.wait_for_load_state('domcontentloaded')

   # 在此处编写你的代码
   # ...
   await page.locator("#search-button").click()
   await page.locator("#search-term").fill("Appium")
   await page.keyboard.down("Enter")

   selector = ".results .item:nth-child(1) .topic-title"

   locator = page.locator(selector)

   # # 等待元素出现在页面上
   await locator.wait_for(state='visible', timeout=5000)









   # await expect(result).to_contain_text("App")
   # #         # result = page.locator(".list>li:nth-child(1).topic-title>span")
   # #         # expect(result).to_contain_text("自动化")
   await context.tracing.stop(path="sy.zip")
   # await page.close()
   await browser.close()

# 运行异步函数
async def main():
    async with async_playwright() as playwright:
        await test_run(playwright)



asyncio.run(main())

# asyncio.get_event_loop().run_until_complete(main())




# def test_sy01():
#     playwright = async_playwright().start()
#     browser = playwright.chromium.launch(headless=False)
#     context = browser.new_context()
#     context.tracing.start(screenshots=True, snapshots=True, sources=True)
#     page = context.new_page()
#     page.goto("https://ceshiren.com")
#     page.locator("#search-button").click()
#     page.locator("#search-term").fill("Appium")
#     page.keyboard.down("Enter")
#
#     result = page.locator(".results .item:nth-child(1).topic-title")
#     expect(result).to_contain_text("Appium")
#     # result = page.locator(".list>li:nth-child(1).topic-title>span")
#     # expect(result).to_contain_text("自动化")
#     context.tracing.stop(path="sy.zip")
#     browser.close()
